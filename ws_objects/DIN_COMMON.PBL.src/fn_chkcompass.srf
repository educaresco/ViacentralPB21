$PBExportHeader$fn_chkcompass.srf
global type fn_chkcompass from function_object
end type

forward prototypes
global subroutine fn_chkcompass (string ps_id_branch, double pd_id_receiver, n_tr_compass p_oracon)
end prototypes

global subroutine fn_chkcompass (string ps_id_branch, double pd_id_receiver, n_tr_compass p_oracon);String TX_AGENTCODE
String TX_NUMBER
Datetime TX_DATE
Double TX_AMOUNT_AMOUNT		 
Double TX_CASH_AMOUNT
String TX_DELIVERY_TYPE
String TX_STATUS_CODE
String TX_CURRENCY_CODE
String TX_PRODUCT_CODE
String TX_CORRESPONDENT_CODE
String TX_ADDITIONAL1
String TX_ADDITIONAL2
String TX_ADDITIONAL3
String SEN_NAME
String SEN_ID1_TYPE_CODE
String SEN_ID1_NUMBER
String SEN_ID1_ISSUEBY
String SEN_ID2_TYPE_CODE
String SEN_ID2_NUMBER
String SEN_ID2_ISSUEBY
String SEN_PHONE1
String SEN_PHONE2
String SEN_ADDRESS
String SEN_CITY
String SEN_STATE_CODE
String SEN_COUNTRY_CODE
String SEN_ZIPCODE
Datetime SEN_DOB
String SEN_OCCUPATION
String SEN_NUMBER 
String REC_NAME
String REC_ID1_TYPE_CODE
String REC_ID1_NUMBER
String REC_ID1_ISSUEBY
String REC_ID2_TYPE_CODE
String REC_ID2_NUMBER
String REC_ID2_ISSUEBY
String REC_PHONE1
String REC_PHONE2
String REC_ADDRESS
String REC_CITY
String REC_STATE_CODE
String REC_COUNTRY_CODE
String REC_ZIPCODE
Datetime REC_DOB
String REC_NUMBER
String DET_IND
String DET_RULE
String DET_MESSAGE
String MATCH_IND
String MATCH_NUMBER
String MATCH_ALIAS_NUMBER 
String MATCH_MESSAGE
String ERR_CODE
String ERR_MESSAGE
String ID_PAYMENT
DateTime TimeStart, TimeEnd

DET_IND = space(1)
DET_RULE = space(5)
DET_MESSAGE = space(200)
MATCH_IND = space(1)
MATCH_NUMBER = space(10)
MATCH_ALIAS_NUMBER = space(10)
MATCH_MESSAGE = space(200)
ERR_CODE = space(5)
ERR_MESSAGE = space(200)


SELECT RTRIM(R.ID_BRANCH) AS TN_AGENT_CODE,
		 ID_RECEIVER AS TN_NUMBER,
		 DATE_RECEIVER AS TN_DATE,
		 TOTAL_RECEIVER AS TN_AMOUNT,		 
		 TOTAL_RECEIVER AS TN_CASH_AMOUNT,
		 RTRIM(mode_pay_receiver) AS TN_PAYMENT_TYPE,
		 RTRIM(ID_FLAG_RECEIVER) AS TN_STATUS_CODE,
		 'D' AS TN_CURRENCY_CODE,
		 '001' AS TN_PRODUCT_CODE,
		 rtrim(id_main_branch_sent) AS TN_CORRESPONDENT_CODE,
		 '' AS TN_ADDITIONAL_INFO1,
 		 '' AS TN_ADDITIONAL_INFO2,
		 '' AS TN_ADDITIONAL_INFO3,
		 rtrim(S.NAME_SENDER) AS S_NAME,
		 rtrim(S.ID_TYPE_ID_SENDER) AS S_ID_1_TYPE_CODE,
		 rtrim(S.NUMBER_ID_SENDER) AS S_ID_1_NUMBER,
		 '' AS S_ID_1_ISSUEBY,
		 '' AS S_ID_2_TYPE_CODE,
		 '' AS S_ID_2_NUMBER,
		 '' AS S_ID_2_ISSUEBY,
		 S.PHONE1_SENDER AS S_PHONE1,
		 S.PHONE2_SENDER AS S_PHONE2,
		 rtrim(S.ADDRES_SENDER) AS S_ADDRESS,
		 rtrim(S.CITY_SENDER) AS S_CITY,
		 isnull(dba.sfGetStateByName(S.STATE_SENDER),s.id_state) AS S_STATE_CODE,
		 'USA' AS S_COUNTRY_CODE,
		 dba.sfGetFullZip(convert(char,ZIP_SENDER)) AS S_ZIPCODE,
		 DOB_SENDER AS S_DOB,
		 OCCUPATION_SENDER as SEN_OCCUPATION,
		 ID_SENDER_GLOBAL AS SEN_NUMBER,	 
		 rtrim(R.NAME_RECEIVER) AS R_NAME,
		 rtrim(R.TYPEID) AS R_ID1_TYPE_CODE,
		 rtrim(R.NUMID) AS R_ID1_NUMBER,
		 '' AS R_ID_1_ISSUEBY,
		 '' AS R_ID2_TYPE_CODE,
		 '' AS R_ID_2_NUMBER,
		 '' AS R_ID_2_ISSUEBY,
		 rtrim(R.PHONE1_RECEIVER) AS R_PHONE1,
		 rtrim(R.PHONE2_RECEIVER) AS R_PHONE2,
	     rtrim(R.ADDRESS_RECEIVER) AS R_ADDRESS,
		 rtrim(C.NAME_CITY) AS R_CITY,
		 rtrim(R.ID_STATE_RECEIVER) AS R_STATE_CODE,
		 rtrim(R.ID_COUNTRY_RECEIVER) AS R_COUNTRY_CODE,
		 rtrim(ZIP_RECEIVER) AS R_ZIPCODE,
		 '' AS R_DOB,
		 '' AS R_NUMBER	
INTO
		:TX_AGENTCODE,
		:TX_NUMBER,
		:TX_DATE,
		:TX_AMOUNT_AMOUNT,		 
		:TX_CASH_AMOUNT,
		:ID_PAYMENT,
		:TX_STATUS_CODE,
		:TX_CURRENCY_CODE,
		:TX_PRODUCT_CODE,
		:TX_CORRESPONDENT_CODE,
		:TX_ADDITIONAL1,
		:TX_ADDITIONAL2,
		:TX_ADDITIONAL3,
		:SEN_NAME,
		:SEN_ID1_TYPE_CODE,
		:SEN_ID1_NUMBER,
		:SEN_ID1_ISSUEBY,
		:SEN_ID2_TYPE_CODE,
		:SEN_ID2_NUMBER,
		:SEN_ID2_ISSUEBY,
		:SEN_PHONE1,
		:SEN_PHONE2,
		:SEN_ADDRESS,
		:SEN_CITY,
		:SEN_STATE_CODE,
		:SEN_COUNTRY_CODE,
		:SEN_ZIPCODE,
		:SEN_DOB,
		:SEN_OCCUPATION,
		:SEN_NUMBER, 
		:REC_NAME,
		:REC_ID1_TYPE_CODE,
		:REC_ID1_NUMBER,
		:REC_ID1_ISSUEBY,
		:REC_ID2_TYPE_CODE,
		:REC_ID2_NUMBER,
		:REC_ID2_ISSUEBY,
		:REC_PHONE1,
		:REC_PHONE2,
		:REC_ADDRESS,
		:REC_CITY,
		:REC_STATE_CODE,
		:REC_COUNTRY_CODE,
		:REC_ZIPCODE,
		:REC_DOB,
		:REC_NUMBER
	FROM DBA.RECEIVER R, DBA.SENDER S, DBA.CITY C
	WHERE R.ID_BRANCH = S.ID_BRANCH
	AND R.ID_SENDER = S.ID_SENDER
	AND R.ID_CITY_RECEIVER = C.ID_CITY
	AND R.ID_BRANCH = :ps_id_branch
	AND R.ID_RECEIVER = :pd_id_receiver
	AND R.ID_RECEIVER > 0;

if sqlca.sqlcode <> 0 then
	messagebox(string(sqlca.sqlcode),sqlca.sqlerrtext)
	return
end if

if TX_STATUS_CODE = 'A' or TX_STATUS_CODE = 'E' then TX_STATUS_CODE = 'C'	

select NOM_MODO_PAGO
  into :TX_DELIVERY_TYPE
  from dba.MODO_PAGO
 where id_modo_pago = :ID_PAYMENT;

if pos(TX_DELIVERY_TYPE," ") > 0 then TX_DELIVERY_TYPE = trim(left(TX_DELIVERY_TYPE,pos(TX_DELIVERY_TYPE," ")))

SetNull(REC_NUMBER)

TimeStart = datetime(today(),now())

P_ORACON.prtxreview(TX_AGENTCODE, TX_NUMBER, TX_DATE, TX_AMOUNT_AMOUNT, TX_CASH_AMOUNT, TX_DELIVERY_TYPE, TX_STATUS_CODE, TX_CURRENCY_CODE, TX_PRODUCT_CODE, TX_CORRESPONDENT_CODE, TX_ADDITIONAL1, TX_ADDITIONAL2, TX_ADDITIONAL3, SEN_NAME, SEN_ID1_TYPE_CODE, SEN_ID1_NUMBER, SEN_ID1_ISSUEBY, SEN_ID2_TYPE_CODE, SEN_ID2_NUMBER, SEN_ID2_ISSUEBY, SEN_PHONE1, SEN_PHONE2, SEN_ADDRESS, SEN_CITY, SEN_STATE_CODE, SEN_COUNTRY_CODE, SEN_ZIPCODE, SEN_DOB, SEN_OCCUPATION, SEN_NUMBER, REC_NAME, REC_ID1_TYPE_CODE, REC_ID1_NUMBER, REC_ID1_ISSUEBY, REC_ID2_TYPE_CODE, REC_ID2_NUMBER, REC_ID2_ISSUEBY, REC_PHONE1, REC_PHONE2, REC_ADDRESS, REC_CITY, REC_STATE_CODE, REC_COUNTRY_CODE, REC_ZIPCODE, REC_DOB, REC_NUMBER, DET_IND, DET_RULE, DET_MESSAGE, MATCH_IND, MATCH_NUMBER, MATCH_ALIAS_NUMBER, MATCH_MESSAGE, ERR_CODE, ERR_MESSAGE)

TimeEnd = datetime(today(),now())

INSERT INTO dba.COMPASS_RESPONSES(
			ID_BRANCH, 
			ID_RECEIVER,
			DET_IND,
			DET_RULE,
			MATCH_IND,
			ERR_CODE,
			ERR_MESSAGE,
			TIME_START,
			TIME_END)
VALUES (:ps_id_branch, 
			:pd_id_receiver,
			:DET_IND,
			:DET_RULE,
			:MATCH_IND,
			:ERR_CODE,
			:ERR_MESSAGE,
			:TimeStart,
			:TimeEnd);

if sqlca.sqlcode <> 0 then
	messagebox(string(sqlca.sqlcode),sqlca.sqlerrtext)
	return
end if
end subroutine

